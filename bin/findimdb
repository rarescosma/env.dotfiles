#!/usr/bin/env python3
"""Search imdb for a movie matching the space-concatenated input
and return a markdown-formatted hyperlink."""
import json
import re
import sys
from contextlib import suppress
from subprocess import check_output
from typing import Sequence

TITLE_RE: re.Pattern = re.compile(r"[^(]\((\d+)\)[^|]+\s(.+)", re.IGNORECASE)


def main(search: Sequence[str]) -> None:
    """Perform the query."""
    query = " ".join(search)
    with suppress(Exception):
        res = list(filter(_is_valid, json.loads(_real_query(query))))

        if not res:
            sys.exit(1)

        first = res[0]
        first["title"] = _normalize_title(first["title"])

        print(_output(first))
        return

    sys.exit(1)


# example: [Only God forgives (2013)](https://www.imdb.com/title/tt1602613/)
def _output(entry: dict[str, str]) -> str:
    return f"[{entry['title']}]({entry['url']})"


def _is_valid(entry: dict[str, str]) -> bool:
    return "url" in entry and "imdb.com/title" in entry["url"]


def _real_query(query: str) -> str:
    args = [
        "ddgr",
        "--noua",
        "--reg",
        '"us"',
        "-w",
        "imdb.com",
        "--json",
        f'"{query}"',
    ]
    return check_output(args)


def _normalize_title(title: str) -> str:
    """
    assert _normalize_title(
        "Uhrilampaat (1991) - IMDb | Original title: The Silence of the Lambs"
    ) == "The Silence of the Lambs (1991)" """
    if "Original title" not in title or (match := TITLE_RE.search(title)) is None:
        return title.removeprefix("Original title: ").removesuffix(" - IMDb")

    year: str = match.group(1)
    title: str = match.group(2).removeprefix("| Original title: ")
    return f"{title} ({year})".removesuffix(" - IMDb")


if __name__ == "__main__":
    main(sys.argv[1:])
