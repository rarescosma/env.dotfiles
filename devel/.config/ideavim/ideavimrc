" Space is leader.
let mapleader=" "

" Reload config.
nmap <silent> <leader>V <Action>(IdeaVim.ReloadVimRc.reload)

set clipboard=autoselect,ideaput
set surround
set hlsearch
set visualbell

" IDE smarts.
set ideajoin
set idearefactormode=keep

" Common + keymap.
source ~/.config/nvim/common.vim
source ~/.config/nvim/keymap.vim

" Clear the search pattern on cancel
noremap <silent> <C-b> :nohl<CR>:let @/ = ""<CR><C-l>

" IDE one action to rule them all.
nmap <leader>a <Action>(GotoAction)
vmap <leader>a <Action>(GotoAction)

" IDE file navigation.
nmap <leader>s <Action>(FileStructurePopup)
nmap <leader>l <Action>(RecentLocations)
nmap <leader>b <Action>(ToggleBookmarkWithMnemonic)
nmap <M-b> <Action>(ShowBookmarks)

" IDE project navigation.
map <C-q> <Action>(CloseContent)
nmap <leader>q <Action>(CloseProject)
nmap <leader>u <Action>(FindUsages)
nmap <C-o> <Action>(Back)
nmap <C-i> <Action>(Forward)
nmap gp <Action>(RecentProjectListGroup)
nmap gc <Action>(GotoClass)
nmap gi <Action>(GotoImplementation)
nmap gu <Action>(GotToSuperMethod)
nmap gt <Action>(GotoTest)

" IDE search & replace.
nmap <leader>f <Action>(Find)
vmap <leader>f <Action>(Find)
nmap <leader>g <Action>(Replace)
vmap <leader>g <Action>(Replace)
nmap <leader>pf <Action>(FindInPath)
vmap <leader>pf <Action>(FindInPath)
nmap <leader>pg <Action>(ReplaceInPath)
vmap <leader>pg <Action>(ReplaceInPath)

" IDE refactor.
nmap <leader>n <Action>(Inline)
nmap <leader>r <Action>(RenameElement)ciw
map <leader>R <Action>(Refactorings.QuickListPopupAction)
map <leader>v <Action>(IntroduceVariable)

" Run, Forest, run!
nmap R <Action>(ChooseRunConfiguration)

" Distraction-free mode.
nmap <leader>h <Action>(ToggleInlineHintsAction)
nmap <leader>H <Action>(ToggleInlayHintsGloballyAction)
nmap <C-h> <Action>(HideAllWindows)
nmap <C-z> <Action>(ToggleDistractionFreeMode)

" Move method up/down.
nmap <C-S-j> <Action>(MoveStatementDown)
nmap <C-S-k> <Action>(MoveStatementUp)

" Paragraph wrapping via 'Wrap Action' plugin.
nmap gqq <Action>(com.andrewbrookins.idea.wrap.WrapAction)
vmap gq <Action>(com.andrewbrookins.idea.wrap.WrapAction)

" Co-exist with the clipboard manager.
sethandler <^v> a:ide

" Do something useful with the arrows.
nmap <Left> %
nmap <Right> *
vmap <Left> %
vmap <Right> *
nmap <Up> <Action>(MethodUp)
nmap <Down> <Action>(MethodDown)

" Conflict-avoidance mode
map <C-l> <Action>(EditorSelectWord)
map <C-f> <Action>(RecentFiles)
map <M-l> <Action>(NextSplitter)
map <M-h> <Action>(PrevSplitter)
map <M-e> <Action>(SplitVertically)
map <M-o> <Action>(SplitHorizontally)
map <C-g> <Action>(Tool_External Tools_idea_tig)
map <C-,> <Action>(Tool_External Tools_idea_vale)
map <C-t> <Action>(ActivateTerminalToolWindow)

" Visual block.
nnoremap <A-v> <C-q>

" Blame
nmap <leader>x <Action>(Annotate)

" Swap arguments (argtextobj + exchange = ❤️)
nmap <leader>S cxccxiaf,wcxia

" Plugins galore
let g:highlightedyank_highlight_duration = "650"
set highlightedyank
set argtextobj
set exchange
let g:qs_highlight_on_keys = ['f', 'F', 't', 'T']
set quickscope
set multiple-cursors
set NERDTree

" N00b mode: key hints via the 'Which Key' plugin.
" set which-key
" set timeoutlen=10000
" let g:WhichKeyDesc_commentray_prefix = "y"

" Experimental: prefer IDE undo. (meh)
" sethandler U a:ide
